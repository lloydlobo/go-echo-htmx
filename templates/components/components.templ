// Tip: See CSS elements, https://templ.guide/syntax-and-usage/css-style-management/#css-elements
// If you want to make sure that the CSS element is only output once, even if you use a template many times, use a CSS expression.
// See grid styling, https://yoksel.github.io/grid-cheatsheet/#section-grid-line-values

package components

import (
	"github.com/lloydlobo/go-headcount/models"
)

var (
	TodoContactRowArgClazz = "activate" // "activate" | "deactivate"
)

templ ContactsTable(contacts models.Contacts) {
	<table class="table">
		<thead>
			<tr>
				<th></th>
				<th>Name</th>
				<th>Phone</th>
				<th>Email</th>
				<th>Status</th>
				<th style="min-width:14ch;">Action</th>
			</tr>
		</thead>
		<tbody id="tBody" hx-target="closest tr" hx-swap="outerHTML swap:1s">
			for _, contact := range contacts {
				@ContactRow(contact)
			}
		</tbody>
	</table>
	<style type="text/css">
        table {
            border-collapse: unset;

            tr td {
                text-wrap: balance;

                /* style the second td that is the name thead field value */
                &:nth-child(2) { min-width: min(45vw, 22ch); }

                /* style the third td that is the phone thead field value */
                &:nth-child(3) { min-width: min(25vw, 16ch); }
            }
        }
    </style>
}

// class={ func() (string) {
//     if contact.Status == models.StatusActive {
//         return "activate"
//     }
//     return "deactivate"
// }() }

// ContactRow partial is <tr> for <tbody> in ContactTable.
templ ContactRow(contact models.Contact) {
	<tr id={ "tr-" + contact.ID.String() } class={  }>
		<td scope="row">
			<label for={ templ.EscapeString("ids" + contact.ID.String()) } aria-label="id">
				<input type="checkbox" name={ templ.EscapeString("ids" + contact.ID.String()) } value={ contact.ID.String() }/>
			</label>
		</td>
		<td>{ contact.Name }</td>
		<td>{ contact.Phone }</td>
		<td>{ contact.Email }</td>
		<td>
			if contact.Status == models.StatusActive {
				<output class="ok color <small>">{ contact.Status.String() }</output>
			} else {
				<output class="warn color <small>">{ contact.Status.String() }</output>
			}
		</td>
		<td style="position:relative;">
			@editDropdown(contact)
		</td>
	</tr>
}

// ContactPutForm is rendered as a response to "GET /contacts/{id}/edit" via handlers.HandleGetUpdateContactForm.
//
// Note: use hx-vals or hx-include for passing id without using it in markup
templ ContactPutForm(contact models.Contact) {
	<form
		hx-put={ "/contacts/" + contact.ID.String() }
		hx-target={ "#tr-" + contact.ID.String() }
		hx-swap="outerHTML"
		class="table rows dense"
	>
		<p inert class="vh">
			<label for="id">Name</label>
			<input
				inert
				id="id"
				name="id"
				placeholder="id"
				value={ contact.ID.String() }
			/>
		</p>
		<p>
			<label for="name" class="!vh">Name</label>
			<!-- size="45" -->
			<input
				type="text"
				pattern="[a-zA-Z ]{3,28}"
				id="name"
				name="name"
				placeholder="Name"
				required
				title="Please enter a name with 4 to 8 characters, including spaces. Only letters are allowed."
				value={ contact.Name }
			/>
		</p>
		<p>
			<label for="phone" class="!vh">Phone</label>
			<input
				type="tel"
				pattern="[0-9]{10}"
				id="phone"
				name="phone"
				placeholder="Phone"
				required
				title="Please enter a 10-digit phone number."
				value={ contact.Phone }
			/>
		</p>
		<p>
			<label for="email" class="!vh">Email</label>
			<input
				type="email"
				id="email"
				name="email"
				placeholder="Email"
				required
				title="Please enter a valid email address."
				value={ contact.Email }
			/>
		</p>
		<p>
			<label for="status" class="!vh">Status</label>
			if contact.Status == models.StatusActive {
				<input checked type="checkbox" id="status" name="status"/>
			} else {
				<input type="checkbox" id="status" name="status"/>
			}
		</p>
		<p>
			<label for="fakerContacts" class="!vh">Faker</label>
			<input type="checkbox" id="fakerContacts" name="fakerContacts"/>
		</p>
		<button type="submit" class="big margin-block">Submit</button>
	</form>
}

// ContactPostForm is rendered as a response to "POST /contacts" via handlers.HandleCreateContact.
templ ContactPostForm() {
	<form
		hx-post="/contacts"
		hx-target="#hx-contacts"
		class="table rows dense"
	>
		<p>
			<label for="name" class="!vh">Name</label>
			<!-- size="45" -->
			<input
				type="text"
				pattern="[a-zA-Z ]{3,28}"
				id="name"
				name="name"
				placeholder="Name"
				required
				title="Please enter a name with 4 to 8 characters, including spaces. Only letters are allowed."
				value="John Doe"
			/>
		</p>
		<p>
			<label for="phone" class="!vh">Phone</label>
			<input
				type="tel"
				pattern="[0-9]{10}"
				id="phone"
				name="phone"
				placeholder="Phone"
				required
				title="Please enter a 10-digit phone number."
				value="1029384756"
			/>
		</p>
		<p>
			<label for="email" class="!vh">Email</label>
			<input
				type="email"
				id="email"
				name="email"
				placeholder="Email"
				required
				title="Please enter a valid email address."
				value="hi@johndoe.com"
			/>
		</p>
		<p>
			<label for="status" class="!vh">Status</label>
			<input type="checkbox" id="status" name="status"/>
		</p>
		<p>
			<label for="fakerContacts" class="!vh">Faker</label>
			<input type="checkbox" id="fakerContacts" name="fakerContacts"/>
		</p>
		<button
			type="submit"
			class="big margin-block"
		>Submit</button>
	</form>
}

// editDropdown is an action ui component for ContactRow.
//
// Note: use arrow fn to access this as current button.
// Note: type="button" avoids page to reload when clicked
templ editDropdown(contact models.Contact) {
	<div x-data="{showDropdown: false,}" class="smooth">
		<!-- Trigger -->
		<button
			@click="showDropdown = !showDropdown"
			type="button"
			role="button"
			class="iconbutton"
		>
			@MoreHorizontalIcon()
		</button>
		<!-- Content -->
		<ul
			x-cloak
			x-show="showDropdown"
			x-transition.opacity
			x-transition:enter.duration.500ms
			x-transition:leave.duration.300ms
			@click.outside="showDropdown = false"
			style="position:absolute; z-index: 1;"
			class="box no-bullets smooth"
		>
			<li class="margin-block-start">
				<!-- Note: ensure that server renders inside the body tag -->
				<button
					name={ "Edit " + contact.Name }
					title={ "Edit " + contact.Name }
					hx-get={ "/contacts/" + contact.ID.String() + "/edit" }
					hx-target="body"
					hx-swap="beforeend"
					type="button"
					role="button"
					class={ "big f-row width:100% justify-content:space-between", "" }
				>
					<span class="!vh">Edit</span>
					<span class="iconbutton">
						@PencilIcon()
					</span>
				</button>
			</li>
			<li>
				<button
					name={ "Remove " + contact.Name }
					title={ "Remove " + contact.Name }
					hx-delete={ "/contacts/" + contact.ID.String() }
					hx-trigger="confirmed"
					onclick={ templ.ComponentScript{ Call: `
                    Swal.fire({ title: 'Confirm', text: 'Do you want to delete?', }).then((result) => {
                        if (result.isConfirmed) {
                            htmx.trigger(this, 'confirmed');
                        }
                    });
                    `, } }
					type="button"
					role="button"
					class={ "big f-row width:100% justify-content:space-between", "bad color" }
				>
					<span class="!vh">Delete</span>
					<span class="iconbutton">
						@TrashIcon()
					</span>
				</button>
			</li>
		</ul>
	</div>
}
