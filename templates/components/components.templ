package components

import (
	"fmt"
	"time"

	"github.com/lloydlobo/go-headcount/models"
	"github.com/lloydlobo/go-headcount/services"
)

css border() {
	border: 1px solid #eeeeee;
	border-radius: 4px;
	margin: 10px;
	padding-top: 30px;
	padding-bottom: 30px;
}

// 404
//
//  http.Handle("/404", templ.Handler(notFoundComponent(), templ.WithStatus(http.StatusNotFound)))
templ notFoundComponent() {
	<div>404 - Not found</div>
}

// timeComponent
//
//  http.Handle("/", templ.Handler(timeComponent(time.Now())))
templ timeComponent(d time.Time) {
	<div>{ d.String() }</div>
}

templ filter(filters []services.Filter) {
	<ul class="filters" _="on load set $filter to me">
		for _, filter := range filters {
			<li>
				<a
					class={ templ.KV("selected", filter.Selected) }
					href={ templ.SafeURL(filter.Url) }
					_="on click add .selected to me"
				>
					{ filter.Name }
				</a>
			</li>
		}
	</ul>
}

var TodoContactLiArgClazz = "activate" // or was it active?

// .list-of-links - Removes underlines from all links inside an element -- sometimes advisable for lists of links.
templ ContactLi(contact models.Contact) {
	<tr class={ "list-of-links", TodoContactLiArgClazz }>
		<td scope="row">
			//    querying all via ids may fail as we are appending each id. maybe choose a global id for each checkbox laabel/input???
			<label for={ templ.EscapeString("ids" + contact.ID.String()) } aria-label="id">
				<input
					type="checkbox"
					name={ templ.EscapeString("ids" + contact.ID.String()) }
					value={ contact.ID.String() }
				/>
			</label>
		</td>
		<td>{ contact.Name }</td>
		<td>
			<address>
				<a href={ templ.URL(fmt.Sprintf("tel:+%s", contact.Phone)) } class="">
					{ contact.Phone }
				</a>
			</address>
		</td>
		<td>
			<address>
				<a href={ templ.URL(fmt.Sprintf("mailto:%s", contact.Email)) } class="">
					{ contact.Email }
				</a>
			</address>
		</td>
		<td>
			if contact.Status == models.StatusActive {
				<output class="chip ok color">{ contact.Status.String() }</output>
			} else {
				<output class="chip warn color">{ contact.Status.String() }</output>
			}
		</td>
	</tr>
}

/*
Notes:

   templ Page(contacts []models.Contact, filters []services.Filter) {
   	<html lang="en" data-framework="htmx">
   		<head>
   			<meta charset="UTF-8"/>
   			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
   			@Title(false)
   			<link rel="stylesheet" href="/static/css/style.css"/>
   			<link rel="stylesheet" href="/static/css/missing.min.css"/>
   			<script type="text/hyperscript" src="/static/hs/start-me-up._hs"></script>
   			<script type="text/hyperscript" src="/static/hs/main._hs"></script>
   			<script src="/static/js/_hyperscript.min.js"></script>
   			<script src="/static/js/htmx.min.js"></script>
   			<script src="/static/js/htmx.title.js"></script>
   			<style type="text/css">
                   input:invalid {
                       border: 3px red solid;
                   }
               </style>
   			<style type="text/tailwindcss">
   			    @layer utilities {
   			         .content-auto {
   			            content-visibility: auto;
   			        }
   			    }
   			</style>
   		</head>
   		<body>
   			@Navbar(false)
   			<section class="app">
   				<article class="prose foo">
   					<div class="flex gap-1">
   						<p>head<b>count</b></p>
   						<button
   							class="text-clifford foo"
   							_="
                               on pointerdown
                                   repeat until event pointerup
                                       set rand to Math.random() * 360
                                       transition
                                           *background-color
                                           to `hsl($rand 100% 90%)`
                                           over 250ms
                                   end
                               "
   						>beta</button>
   					</div>
   				</article>
   				<span hx-get="/contacts" hx-trigger="load"></span>
   				<div class={ "lg:content-auto", border }>
   					<span hx-get="/contacts" hx-target="#hx-contacts" hx-swap="beforeend" hx-trigger="load"></span>
   					<button hx-post="/contacts" hx-target="#hx-contacts" hx-swap="beforeend" class="btn">
   						New +
   					</button>
   					<ul id="hx-contacts"></ul>
   				</div>
   			</section>
   			<footer
   				class="info"
   				_="
                     on load debounced at 10ms
                     call startMeUp()
                     hashCache()
                   "
   			>
   				<p>head<b>count</b></p>
   				@radioButtons()
   			</footer>
   		</body>
   	</html>
   }
   templ radioButtons() {
   	<fieldset>
   		<legend>Color</legend>
   		<ul>
   			<li>
   				<label>
   					<input type="radio" name="color" value="ff0000"/>
   					Red
   				</label>
   			</li>
   			<li>
   				<label>
   					<input type="radio" name="color" value="00ff00"/>
   					Green
   				</label>
   			</li>
   			<li>
   				<label>
   					<input type="radio" name="color" value="0000ff"/>
   					Blue
   				</label>
   			</li>
   		</ul>
   	</fieldset>
   }
*/
