package main

// import (
// 	"fmt"
// 	"strconv"
// )
//

// [Using html/template in a templ component](https://templ.guide/syntax-and-usage/using-with-go-templates#using-htmltemplate-in-a-templ-component)

//
templ filter(filters []Filter) {
	<ul class="filters" _="on load set $filter to me">
		for _, filter := range filters {
			<li>
				<a
					class={ templ.KV("selected", filter.selected) }
					href={ templ.SafeURL(filter.url) }
					_="on click add .selected to me"
				>
					{ filter.name }
				</a>
			</li>
		}
	</ul>
}

templ Page(contacts []Contact,filters []Filter) {
	<html lang="en" data-framework="htmx">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>My Go Web App</title>
			// <script src="https://cdn.tailwindcss.com"></script>
			<script src="https://cdn.tailwindcss.com?plugins=forms,typography,aspect-ratio,line-clamp"></script>
			<script type="text/hyperscript" src="/hs/start-me-up._hs"></script>
			<script type="text/hyperscript" src="/hs/main._hs"></script>
			<style>
            input:invalid {
                border: red solid 3px;
            }
            </style>
			<script>
                tailwind.config = {
                  theme: {
                    extend: {
                      colors: {
                        clifford: '#da373d',
                      }
                    }
                  }
                }
            </script>
		</head>
		<body>
			<h1 class="text-3xl font-bold">go-headcount</h1>
			<h2 class="text-3xl font-bold underline text-clifford">
				Hello world!
			</h2>
			<button
				class="uppercase btn"
				_="
                on pointerdown
                    repeat until event pointerup
                        set rand to Math.random() * 360
                        transition
                            *background-color
                            to `hsl($rand 100% 90%)`
                            over 250ms
                    end
                "
			>Try me: press and hold</button>
			// <h1 class="text-3xl font-bold">Hello, { {.Name} }!</h1>
			<p>
				<label>
					Enter your phone number in the format (123) - 456 - 7890 (
					<input
						name="tel1"
						type="tel"
						pattern="[0-9]{3}"
						placeholder="###"
						aria-label="3-digit area code"
						size="2"
					/>) -
					<input name="tel2" type="tel" pattern="[0-9]{3}" placeholder="###" aria-label="3-digit prefix" size="2"/>
					-
					<input name="tel3" type="tel" pattern="[0-9]{4}" placeholder="####" aria-label="4-digit number" size="3"/>
				</label>
			</p>
			<form>
				<div>
					<label for="uname">Choose a username: </label>
					<input
						type="text"
						id="uname"
						name="name"
						required
						size="45"
						pattern="[a-z]{4,8}"
						title="4 to 8 lowercase letters"
					/>
					<span class="validity"></span>
					<p>Usernames must be lowercase and 4-8 characters in length.</p>
				</div>
				<div>
					<button>Submit</button>
				</div>
			</form>
		</body>
		<script defer src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>
		<script defer src="https://unpkg.com/hyperscript.org@0.9.12"></script>
	</html>
}

// /*
// 			<script>
//                 tailwind.config = {
//                     darkMode: ["class"],
//                     content: ["app/**/*.{ts,tsx}", "components/**/*.{ts,tsx}"],
//                     theme: {
//                         container: {
//                         center: true,
//                         padding: "2rem",
//                         screens: {
//                             "2xl": "1400px",
//                         },
//                         },
//                         extend: {
//                         colors: {
//                             border: "hsl(var(--border))",
//                             input: "hsl(var(--input))",
//                             ring: "hsl(var(--ring))",
//                             background: "hsl(var(--background))",
//                             foreground: "hsl(var(--foreground))",
//                             primary: {
//                             DEFAULT: "hsl(var(--primary))",
//                             foreground: "hsl(var(--primary-foreground))",
//                             },
//                             secondary: {
//                             DEFAULT: "hsl(var(--secondary))",
//                             foreground: "hsl(var(--secondary-foreground))",
//                             },
//                             destructive: {
//                             DEFAULT: "hsl(var(--destructive))",
//                             foreground: "hsl(var(--destructive-foreground))",
//                             },
//                             muted: {
//                             DEFAULT: "hsl(var(--muted))",
//                             foreground: "hsl(var(--muted-foreground))",
//                             },
//                             accent: {
//                             DEFAULT: "hsl(var(--accent))",
//                             foreground: "hsl(var(--accent-foreground))",
//                             },
//                             popover: {
//                             DEFAULT: "hsl(var(--popover))",
//                             foreground: "hsl(var(--popover-foreground))",
//                             },
//                             card: {
//                             DEFAULT: "hsl(var(--card))",
//                             foreground: "hsl(var(--card-foreground))",
//                             },
//                         },
//                         borderRadius: {
//                             lg: `var(--radius)`,
//                             md: `calc(var(--radius) - 2px)`,
//                             sm: "calc(var(--radius) - 4px)",
//                         },
//                         fontFamily: {
//                             sans: ["var(--font-sans)", ...fontFamily.sans],
//                         },
//                         keyframes: {
//                             "accordion-down": {
//                             from: { height: "0" },
//                             to: { height: "var(--radix-accordion-content-height)" },
//                             },
//                             "accordion-up": {
//                             from: { height: "var(--radix-accordion-content-height)" },
//                             to: { height: "0" },
//                             },
//                         },
//                         animation: {
//                             "accordion-down": "accordion-down 0.2s ease-out",
//                             "accordion-up": "accordion-up 0.2s ease-out",
//                         },
//                         },
//                     },
//                 }
//             </script>
// */
